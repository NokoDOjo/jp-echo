// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Video {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  description String?
  url         String
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  subtitle    Subtitle?
  quiz        Quiz[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subtitle {
  id           Int            @id @default(autoincrement())
  videoId      Int            @unique
  s3Path       String?        @db.VarChar(255)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  video        Video          @relation(fields: [videoId], references: [id], onDelete: Cascade)
  subtitleLine SubtitleLine[]

  @@index([videoId], name: "fk_subtitles_video_id")
}

model SubtitleLine {
  id             Int      @id @default(autoincrement())
  subtitleId     Int
  lineIndex      Int
  line           String
  timestampStart Int
  timestampEnd   Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  subtitle Subtitle @relation(fields: [subtitleId], references: [id])
  word     Word[]

  @@index([subtitleId], name: "fk_subtitle_lines_subtitle_id")
}

model Word {
  id             Int           @id @default(autoincrement())
  japanese       String        @db.VarChar(255)
  chinese        String        @db.VarChar(255)
  jlptLevel      Int?          @db.SmallInt
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
  subtitleLineId Int?
  subtitleLine   SubtitleLine? @relation(fields: [subtitleLineId], references: [id])
}

model Quiz {
  id          Int      @id @default(autoincrement())
  videoId     Int
  videoUrl    String?  @db.VarChar(255)
  description String   @db.VarChar(255)
  choice      Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([videoId], name: "fk_quizzes_video_id")
}

model Step {
  id          Int         @id @default(autoincrement())
  videoId     Int
  title       String      @db.VarChar(255)
  description String?     @db.Text
  type        StepType
  subType     StepSubType
  order       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
}

model User {
  id        String   @id @default(uuid())
  email     String?  @unique
  username  String   @unique
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Video     Video[]
}

model RevokedToken {
  id        Int      @id @default(autoincrement())
  tokenId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum StepType {
  VIDEO
  QUIZ
  COMPLETE
}

enum StepSubType {
  noSubtitle
  practiceKeyword
  jpKeyword
  jpSubtitle
  MCQ
}

enum UserRole {
  USER
  ADMIN
}
